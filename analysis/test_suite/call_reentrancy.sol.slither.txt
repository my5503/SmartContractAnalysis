Installing '0.8.17'...
Version '0.8.17' installed.
Switched global version to 0.8.17
Compilation warnings/errors on /tmp/test_suite/call_reentrancy.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> test_suite/call_reentrancy.sol

Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test_suite/call_reentrancy.sol:29:1:
   |
29 | contract Attack {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test_suite/call_reentrancy.sol:37:5:
   |
37 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


[91m
Attack.attack() (test_suite/call_reentrancy.sol#43-47) sends eth to arbitrary user
	Dangerous calls:
	- etherStore.deposit{value: 1000000000000000000}() (test_suite/call_reentrancy.sol#45)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
[91m
Reentrancy in EtherStore.withdraw() (test_suite/call_reentrancy.sol#9-21):
	External calls:
	- (sent) = msg.sender.call{value: bal}() (test_suite/call_reentrancy.sol#15)
	State variables written after the call(s):
	- balances[msg.sender] = 0 (test_suite/call_reentrancy.sol#20)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities[0m
[93m
EtherStore.withdraw() (test_suite/call_reentrancy.sol#9-21) uses a dangerous strict equality:
	- assert(bool)(o_bal == n_bal + bal) (test_suite/call_reentrancy.sol#19)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
[92m
Pragma version^0.8.13 (test_suite/call_reentrancy.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
solc-0.8.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
[92m
Low level call in EtherStore.withdraw() (test_suite/call_reentrancy.sol#9-21):
	- (sent) = msg.sender.call{value: bal}() (test_suite/call_reentrancy.sol#15)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
[92m
deposit() should be declared external:
	- EtherStore.deposit() (test_suite/call_reentrancy.sol#5-7)
withdraw() should be declared external:
	- EtherStore.withdraw() (test_suite/call_reentrancy.sol#9-21)
getBalance() should be declared external:
	- Attack.getBalance() (test_suite/call_reentrancy.sol#50-52)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
/tmp/test_suite/call_reentrancy.sol analyzed (2 contracts with 78 detectors), 9 result(s) found

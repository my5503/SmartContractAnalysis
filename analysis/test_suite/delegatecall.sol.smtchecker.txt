Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> test_suite/delegatecall.sol:36:1:
   |
36 | contract HackMe {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> test_suite/delegatecall.sol:45:5:
   |
45 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Return value of low-level calls not used.
  --> test_suite/delegatecall.sol:48:9:
   |
48 |         address(lib).delegatecall(msg.data);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
  --> test_suite/delegatecall.sol:61:9:
   |
61 |         hackMe.call(abi.encodeWithSignature("pwn()"));
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Assertion checker does not yet implement this type of function call.
  --> test_suite/delegatecall.sol:48:9:
   |
48 |         address(lib).delegatecall(msg.data);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: CHC: Assertion violation happens here.
Counterexample:
owner = 0x01, lib = 0
o_owner = 0x0

Transaction trace:
HackMe.constructor(0){ msg.sender: 0x0 }
State: owner = 0x0, lib = 0
HackMe.fallback(){ msg.data: [0x1c, 0x1c, 0x1c], msg.value: 2437 }
  --> test_suite/delegatecall.sol:49:2:
   |
49 | 	assert(o_owner == owner);
   | 	^^^^^^^^^^^^^^^^^^^^^^^^

